package leetcode.week210411;

/**
 *  这玩意儿时间复杂度太高了
 *  超时了
 */
public class LC5728 {

    public static void main(String[] args) {
        LC5728 lc = new LC5728();
        int i = lc.minSideJumps(new int[]{
                0, 2, 2, 1, 0, 3, 0, 3, 0, 1, 3, 1, 1, 0, 1, 3, 1, 1, 1, 0, 2, 0, 0, 3, 3, 0, 3, 2, 2, 0, 0, 3, 3, 3, 0, 0, 2, 0, 0, 3, 3, 0, 3, 3, 0, 0, 3, 1, 0, 1, 0, 2, 3, 1, 1, 0, 3, 3, 0, 3, 1, 3, 0, 2, 2, 0, 1, 3, 0, 1, 0, 3, 0, 1, 3, 1, 2, 2, 0, 0, 3, 0, 1, 3, 2, 3, 2, 1, 0, 3, 2, 2, 0, 3, 3, 0, 3, 0, 0, 1, 0, 2, 0, 0, 0, 2, 1, 2, 0, 2, 2, 3, 3, 3, 0, 0, 1, 1, 3, 0, 0, 0, 1, 2, 2, 1, 2, 1, 3, 2, 2, 3, 1, 3, 0, 1, 1, 1, 3, 0, 0, 0, 2, 0, 2, 0, 3, 1, 2, 3, 3, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 2, 1, 2, 3, 1, 0, 3, 3, 2, 0, 1, 1, 0, 1, 0, 2, 2, 2, 1, 3, 0, 3, 0, 2, 1, 1, 3, 1, 0, 1, 2, 2, 0, 2, 2, 0, 0, 3, 3, 1, 3, 0, 1, 1, 0, 3, 0, 2, 1, 2, 2, 0, 0, 0, 1, 2, 3, 1, 2, 1, 1, 2, 2, 1, 1, 0, 2, 3, 3, 3, 0, 2, 3, 2, 0, 0, 0, 1, 0, 2, 2, 0, 0, 2, 0, 2, 0, 1, 1, 0, 3, 1, 3, 3, 0, 1, 0, 3, 0, 3, 1, 2, 3, 1, 0, 0, 2, 3, 2, 0, 0, 3, 1, 2, 3, 2, 2, 3, 1, 3, 3, 2, 0, 1, 3, 0, 3, 2, 2, 3, 2, 1, 2, 2, 0, 3, 2, 0, 2, 1, 2, 2, 3, 1, 3, 2, 2, 0, 0, 1, 0, 3, 1, 3, 3, 0, 0, 2, 2, 2, 2, 0, 1, 0, 3, 1, 3, 3, 3, 0, 2, 3, 2, 0, 3, 3, 3, 3, 3, 3, 2, 2, 1, 1, 0, 3, 1, 3, 2, 3, 0, 0, 0, 2, 1, 1, 3, 1, 3, 2, 1, 3, 0, 1, 1, 3, 2, 2, 1, 0, 0, 3, 2, 1, 3, 2, 3, 3, 2, 1, 2, 0, 2, 2, 0, 2, 2, 3, 2, 0, 2, 3, 3, 1, 1, 2, 0, 1, 1, 1, 2, 3, 2, 1, 2, 1, 0, 2, 3, 1, 1, 3, 3, 2, 0, 1, 3, 2, 3, 3, 0, 1, 2, 3, 2, 1, 1, 2, 1, 0, 0, 1, 0, 3, 1, 1, 1, 0, 2, 0, 2, 2, 3, 0, 1, 0, 2, 0, 0, 3, 1, 1, 2, 0, 0, 2, 1, 1, 0, 2, 2, 2, 3, 1, 2, 0, 1, 2, 0, 1, 2, 1, 2, 3, 1, 1, 1, 1, 0, 3, 3, 2, 1, 0, 0, 1, 0, 3, 0, 0, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 0, 3, 1, 3, 2, 1, 2, 2, 3, 1, 0, 1, 1, 1, 0, 0, 0, 1, 3, 3, 2, 2, 1, 2, 0, 0, 0, 3, 1, 3, 2, 3, 1, 3, 2, 3, 1, 3, 2, 0, 1, 2, 1, 1, 2, 1, 3, 0, 1, 1, 1, 3, 3, 1, 0, 0, 3, 2, 2, 3, 1, 1, 0, 3, 0, 0, 3, 0, 3, 1, 2, 0, 2, 3, 2, 3, 0, 3, 2, 3, 0, 2, 2, 3, 0, 3, 3, 3, 1, 0, 1, 2, 2, 0, 3, 3, 1, 3, 2, 2, 3, 2, 1, 1, 0, 0, 0, 0, 2, 1, 0, 1, 1, 1, 1, 0, 3, 0, 1, 0, 0, 1, 0, 2, 0, 0, 1, 2, 0, 0, 0, 3, 3, 1, 0, 3, 2, 1, 2, 3, 2, 0, 3, 3, 0, 2, 3, 1, 1, 0, 2, 2, 3, 3, 0, 1, 0, 0, 3, 1, 2, 3, 0, 1, 2, 3, 2, 2, 0, 1, 2, 0, 3, 0, 3, 0, 1, 1, 3, 2, 2, 2, 3, 1, 2, 0, 0, 3, 0, 2, 3, 3, 1, 0, 3, 3, 0, 0, 0, 3, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, 3, 3, 0, 0, 1, 1, 1, 1, 2, 2, 0, 1, 0, 2, 2, 0, 2, 1, 3, 1, 1, 1, 2, 1, 1, 0, 3, 1, 0, 2, 3, 0, 1, 2, 0, 0, 3, 1, 2, 3, 0, 0, 3, 1, 0, 2, 2, 0, 1, 1, 2, 2, 1, 3, 1, 2, 1, 0, 1, 2, 3, 2, 3, 0, 3, 1, 3, 0, 2, 0, 3, 1, 1, 0, 3, 2, 0, 3, 0, 2, 0, 0, 3, 3, 1, 1, 1, 0, 0, 1, 1, 1, 2, 3, 1, 3, 1, 2, 0, 0, 3, 3, 0, 3, 3, 0, 0, 0, 3, 3, 0, 3, 3, 2, 3, 3, 3, 3, 1, 1, 1, 3, 1, 1, 3, 3, 1, 0, 0, 3, 1, 2, 0, 2, 0, 3, 0, 2, 1, 0, 1, 0, 2, 3, 3, 3, 2, 3, 3, 2, 0, 0, 0, 2, 2, 3, 0, 0, 3, 0, 2, 3, 0, 1, 3, 2, 1, 2, 0, 1, 3, 2, 2, 0, 1, 1, 3, 3, 0, 2, 3, 0, 3, 3, 1, 2, 3, 2, 1, 0, 2, 3, 2, 2, 2, 3, 0, 1, 1, 3, 1, 0, 2, 1, 3, 2, 2, 2, 3, 3, 1, 1, 1, 3, 2, 3, 1, 0, 2, 3, 0, 2, 3, 0, 1, 3, 3, 1, 1, 1, 1, 0, 1, 1, 2, 2, 0, 2, 1, 1, 0, 1, 0, 3, 1, 1, 1, 3, 3, 2, 1, 2, 3, 2, 2, 3, 1, 0, 3, 2, 0, 1, 0, 1, 3, 3, 3, 0, 3, 3, 2, 3, 1, 2, 2, 1, 1, 0, 0, 3, 0
        });
        System.out.println(i);
    }

    int min = Integer.MAX_VALUE;

    public int minSideJumps(int[] obstacles) {
        int n = obstacles.length - 1;
        if (n == 1) {
            return 0;
        }
        // 已知 0 和 n 处是没有障碍物的
        int pos = 2;
        dfs(pos, 0, n, 0, obstacles);

        return min;
    }


    private void dfs(int pos, int idx, int n, int curSkip, int[] obstacles) {
        if (idx == n) {
            min = Math.min(min, curSkip);
            return;
        }
        if (obstacles[idx + 1] == 0) {
            dfs(pos, idx + 1, n, curSkip, obstacles);
        } else {
            if (pos == obstacles[idx + 1]) {
                if ((curSkip + 1) > min) {
                    return;
                }
                if (pos == 2) {
                    if (obstacles[idx] == 0) {
                        dfs(1, idx + 1, n, curSkip + 1, obstacles);
                        dfs(3, idx + 1, n, curSkip + 1, obstacles);
                    } else if (obstacles[idx] == 1) {
                        dfs(3, idx + 1, n, curSkip + 1, obstacles);
                    } else {
                        dfs(1, idx + 1, n, curSkip + 1, obstacles);
                    }
                } else if (pos == 1) {
                    if (obstacles[idx] == 0) {
                        dfs(2, idx + 1, n, curSkip + 1, obstacles);
                        dfs(3, idx + 1, n, curSkip + 1, obstacles);
                    } else if (obstacles[idx] == 2) {
                        dfs(3, idx + 1, n, curSkip + 1, obstacles);
                    } else {
                        dfs(2, idx + 1, n, curSkip + 1, obstacles);
                    }
                } else {
                    if (obstacles[idx] == 0) {
                        dfs(1, idx + 1, n, curSkip + 1, obstacles);
                        dfs(2, idx + 1, n, curSkip + 1, obstacles);
                    } else if (obstacles[idx] == 1) {
                        dfs(2, idx + 1, n, curSkip + 1, obstacles);
                    } else {
                        dfs(1, idx + 1, n, curSkip + 1, obstacles);
                    }
                }
            } else {
                dfs(pos, idx + 1, n, curSkip, obstacles);
            }
        }
    }
}


